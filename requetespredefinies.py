# -*- coding: utf-8 -*-
"""
/***************************************************************************
 requetespredefinies
                                 A QGIS plugin
 requetespredefinies
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-06-26
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Faris
        email                : faris.maisonneuve@wanadoo.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os
from PyQt5 import uic
from qgis.core import QgsRectangle
from qgis.PyQt.QtCore import QRectF
from qgis.PyQt import QtCore
from qgis.PyQt.QtWidgets import QDialog, QDialogButtonBox, QVBoxLayout, QLabel, QLineEdit, QPushButton, QMessageBox, QTextEdit
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsVectorLayer, QgsProject

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .requetespredefinies_dialog import requetespredefiniesDialog
import os.path
import os
import xml.etree.ElementTree as ET

class requetespredefinies:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'requetespredefinies_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&requetespredefinies')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('requetespredefinies', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/requetespredefinies/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&requetespredefinies'),
                action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        # ...

        # show the dialog
        self.dialog = MyPluginDialog(self.iface)
        self.dialog.show()
        # Run the dialog event loop
        result = self.dialog.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass

        
class MyPluginDialog(QDialog):
    def __init__(self, iface):
        super(MyPluginDialog, self).__init__()
        self.iface = iface
        ui_file_path = os.path.join(os.environ['APPDATA'], 'QGIS', 'QGIS3', 'profiles', 'default', 'python', 'plugins', 'requetespredefinies', 'requetespredefinies_dialog_base.ui') 
        uic.loadUi(ui_file_path, self)

        self.setWindowTitle("requetespredefinies")

        # Connecter les signaux aux slots
        self.pushButton.clicked.connect(self.execute_query)
        self.button_box.accepted.connect(self.accept)
        self.button_box.rejected.connect(self.reject)

        self.load_query_names()

    def execute_query(self):
        query_name = self.comboBox.currentText()
        if query_name:
            sql_query = self.get_sql_query(query_name)
            if sql_query:
                id_value = self.textEdit.toPlainText()
                if id_value:
                    sql_query = sql_query.replace("{id}", str(id_value))
                    layer = QgsVectorLayer(f"?query={sql_query}", "result", "virtual")
                    if layer.isValid():
                        self.refresh_canvas(layer)
                        self.select_and_zoom_to_feature(layer)
                    else:
                        QMessageBox.critical(self, "Erreur", "La requête n'a pas pu être exécutée.")
                else:
                    QMessageBox.critical(self, "Erreur", "Veuillez entrer une valeur d'ID.")
        else:
            QMessageBox.critical(self, "Erreur", "Veuillez sélectionner une requête.")

    def get_sql_query(self, query_name):
        xml_file_path = os.path.join(os.environ['APPDATA'], 'QGIS', 'QGIS3', 'profiles', 'default', 'python', 'plugins', 'requetespredefinies', 'requetes.xml')
        # xml_file_path = r"C:\Users\33766\AppData\Roaming\QGIS\QGIS3\profiles\default\python\plugins\requetespredefinies\requetes.xml"
        

        if not os.path.isfile(xml_file_path):
            QMessageBox.critical(self, "Erreur", "Le fichier XML n'existe pas.")
            return None

        tree = ET.parse(xml_file_path)
        root = tree.getroot()

        query_element = root.find(f"./query[@name='{query_name}']")
        if query_element is None:
            QMessageBox.critical(self, "Erreur", "La requête spécifiée n'a pas été trouvée dans le fichier XML.")
            return None

        sql_query = query_element.text.strip()

        return sql_query

    def refresh_canvas(self, layer):
        canvas = self.iface.mapCanvas()
        canvas.setExtent(layer.extent())
        canvas.refresh()  # Rafraîchit la toile de la carte pour afficher les modifications

    def load_query_names(self):
        xml_file_path = os.path.join(os.environ['APPDATA'], 'QGIS', 'QGIS3', 'profiles', 'default', 'python', 'plugins', 'requetespredefinies', 'requetes.xml')
        # xml_file_path = r"C:\Users\33766\AppData\Roaming\QGIS\QGIS3\profiles\default\python\plugins\requetespredefinies\requetes.xml"

        if not os.path.isfile(xml_file_path):
            QMessageBox.critical(self, "Erreur", "Le fichier XML n'existe pas.")
            return

        tree = ET.parse(xml_file_path)
        root = tree.getroot()

        query_elements = root.findall("./query")
        query_names = [query.get("name") for query in query_elements]

        self.comboBox.addItems(query_names)  

    def connect_signals(self):
        self.comboBox.currentIndexChanged.connect(self.update_interface)
    

    def select_and_zoom_to_feature(self, layer):
        features = layer.getFeatures()
        for feature in features:
            layer.selectByIds([feature.id()])  # Sélectionne l'entité par son identifiant
            break

        if layer.selectedFeatureCount() > 0:  # Vérifie s'il y a des entités sélectionnées
            selected_features = layer.selectedFeatures()
            extent = selected_features[0].geometry().boundingBox()
            canvas = self.iface.mapCanvas()
            canvas.zoomToFeatureExtent(extent)

            scale_factor = 20  # Ajuste la valeur du zoom
            current_scale = canvas.scale()
            new_scale = current_scale / scale_factor  # Calcule la nouvelle échelle en divisant l'échelle actuelle par le facteur d'échelle

            canvas.zoomScale(new_scale)
            canvas.refresh()

        else:
            QMessageBox.critical(self, "Erreur", "La requête n'a pas pu être exécutée.")